{"ast":null,"code":"var _jsxFileName = \"/Users/kevinterrier/adm-sca/client/src/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport jwt from 'jsonwebtoken';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const history = useNavigate();\n  const [quote, setQuote] = useState('');\n  const [tempQuote, setTempQuote] = useState('');\n\n  async function populateQuote() {\n    const req = await fetch('http://localhost:1337/api/quote', {\n      headers: {\n        'x-access-token': localStorage.getItem('token')\n      }\n    });\n    const data = await req.json();\n\n    if (data.status === 'ok') {\n      setQuote(data.quote);\n    } else {\n      alert(data.error);\n    }\n  }\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = jwt.decode(token);\n\n      if (!user) {\n        localStorage.removeItem('token');\n        history('/login');\n      } else {\n        populateQuote();\n      }\n    }\n  });\n\n  async function updateQuote(event) {\n    event.preventDefault();\n    const req = await fetch('http://localhost:1337/api/quote', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        quote: tempQuote\n      })\n    });\n    const data = await req.json();\n\n    if (data.status === 'ok') {\n      setQuote(tempQuote);\n      setTempQuote('');\n    } else {\n      alert(data.error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Your quote: \", quote || 'No quote found']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateQuote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Quote\",\n        value: tempQuote,\n        onChange: e => setTempQuote(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Update quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"83qPvn+Xy0MEz5gm19PvSRBusIw=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/kevinterrier/adm-sca/client/src/pages/Dashboard.js"],"names":["React","useEffect","jwt","useNavigate","useState","Dashboard","history","quote","setQuote","tempQuote","setTempQuote","populateQuote","req","fetch","headers","localStorage","getItem","data","json","status","alert","error","token","user","decode","removeItem","updateQuote","event","preventDefault","method","body","JSON","stringify","e","target","value"],"mappings":"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","sourcesContent":["import React , {useEffect} from 'react'\nimport jwt from 'jsonwebtoken'\nimport{useNavigate} from 'react-router-dom'\nimport  { useState } from \"react\";\n\n\nconst Dashboard = ()=> {\n    const  history = useNavigate()\n    const [quote, setQuote] = useState('')\n    const [tempQuote, setTempQuote] = useState('')\n\n    async function populateQuote(){\n       const req =  await fetch('http://localhost:1337/api/quote',{headers :{\n            'x-access-token': localStorage.getItem('token'),\n        },\n    })\n    const data = await req.json()\nif(data.status === 'ok'){\n    setQuote(data.quote)\n    }else{alert(data.error)}  \n  }\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    if (token) {\n        const user = jwt.decode(token)\n        if (!user) {\n            localStorage.removeItem('token')\n            history('/login')\n        } else {\n            populateQuote()\n        }\n    }\n},)\n\nasync function updateQuote(event) {\n    event.preventDefault()\n\n    const req = await fetch('http://localhost:1337/api/quote', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-access-token': localStorage.getItem('token'),\n        },\n        body: JSON.stringify({\n            quote: tempQuote,\n        }),\n    })\n\n    const data = await req.json()\n    if (data.status === 'ok') {\n        setQuote(tempQuote)\n        setTempQuote('')\n    } else {\n        alert(data.error)\n    }\n}\n\nreturn (\n    <div>\n        <h1>Your quote: {quote || 'No quote found'}</h1>\n        <form onSubmit={updateQuote}>\n            <input\n                type=\"text\"\n                placeholder=\"Quote\"\n                value={tempQuote}\n                onChange={(e) => setTempQuote(e.target.value)}\n            />\n            <input type=\"submit\" value=\"Update quote\" />\n        </form>\n       \n\t\t</div>\n\t)\n}\n    \nexport default Dashboard\n\n\n"]},"metadata":{},"sourceType":"module"}