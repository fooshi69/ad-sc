{"ast":null,"code":"var _jsxFileName = \"/Users/kevinterrier/adm-sca/client/src/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport jwt from 'jsonwebtoken';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from \"react\";\nimport * as Realm from 'realm-web';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppId = 'scanup-gwhxh';\nconst graphqlUri = `https://realm.mongodb.com/api/client/v2.0/app/${AppId}/graphql`;\nconst App = new Realm.App({\n  id: AppId\n});\nconst apolloClient = new ApolloClient({\n  link: new HttpLink({\n    uri: graphqlUri\n  }),\n  fetch: async (uri, options) => {\n    const accessToken = App.currentUser;\n    options.headers.Authorization = `Bearer ${accessToken}`;\n    console.log('Client init');\n    return fetch(uri, options);\n  },\n  cache: new InMemoryCache()\n});\n\nfunction Login({\n  setUser\n}) {\n  const loginAnonymous = async () => {\n    const user = await App.logIn(Realm.Credentials.emailPassword(\"public@scanup.vicat.fr\", \"LeAheBaWtTRbM3KP\"));\n    setUser(user);\n    console.log(user);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loginAnonymous,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: apolloClient,\n      children: \"Client\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: dataQuery,\n      children: \"Identifiants\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Login;\n\nfunction dataQuery() {\n  const {\n    loading,\n    error,\n    data\n  } = apolloClient(gql`\nquery allDivisions {\n    ScanDivision {\n        _id,\n        certificat\n    }\n\n}`);\n  console.log(data);\n}\n\nconst Dashboard = () => {\n  _s();\n\n  const history = useNavigate();\n  const [quote, setQuote] = useState('');\n  const [tempQuote, setTempQuote] = useState('');\n\n  async function populateQuote() {\n    const req = await fetch('http://localhost:1337/api/quote', {\n      headers: {\n        'x-access-token': localStorage.getItem('token')\n      }\n    });\n    const data = await req.json();\n\n    if (data.status === 'ok') {\n      setQuote(data.quote);\n    } else {\n      alert(data.error);\n    }\n  }\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = jwt.decode(token);\n\n      if (!user) {\n        localStorage.removeItem('token');\n        history.replace('/login');\n      } else {\n        populateQuote();\n      }\n    }\n  });\n  const [user, setUser] = React.useState(App.curentUser);\n\n  async function updateQuote(event) {\n    event.preventDefault();\n    const req = await fetch('http://localhost:1337/api/quote', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        quote: tempQuote\n      })\n    });\n    const data = await req.json();\n\n    if (data.status === 'ok') {\n      setQuote(tempQuote);\n      setTempQuote('');\n    } else {\n      alert(data.error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Your quote: \", quote || 'No quote found']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateQuote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Quote\",\n        value: tempQuote,\n        onChange: e => setTempQuote(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Update quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Login, {\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"PJ/Tf1Rr9KKgCaT8RR3oZI1mymk=\", false, function () {\n  return [useNavigate];\n});\n\n_c2 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Login\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"sources":["/Users/kevinterrier/adm-sca/client/src/pages/Dashboard.js"],"names":["React","useEffect","jwt","useNavigate","useState","Realm","ApolloClient","HttpLink","InMemoryCache","gql","AppId","graphqlUri","App","id","apolloClient","link","uri","fetch","options","accessToken","currentUser","headers","Authorization","console","log","cache","Login","setUser","loginAnonymous","user","logIn","Credentials","emailPassword","dataQuery","loading","error","data","Dashboard","history","quote","setQuote","tempQuote","setTempQuote","populateQuote","req","localStorage","getItem","json","status","alert","token","decode","removeItem","replace","curentUser","updateQuote","event","preventDefault","method","body","JSON","stringify","e","target","value"],"mappings":"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","sourcesContent":["import React , {useEffect} from 'react'\nimport jwt from 'jsonwebtoken'\nimport{useNavigate} from 'react-router-dom'\nimport  { useState } from \"react\";\nimport * as Realm from 'realm-web'\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport gql from 'graphql-tag'\n\nconst AppId = 'scanup-gwhxh'\nconst graphqlUri = `https://realm.mongodb.com/api/client/v2.0/app/${AppId}/graphql`\nconst App = new Realm.App({id: AppId})\n\nconst apolloClient = new ApolloClient({\n    link: new HttpLink({\n      uri: graphqlUri\n    }),\n    fetch: async (uri, options) => {\n        const accessToken = App.currentUser;\n        options.headers.Authorization = `Bearer ${accessToken}`;\n        console.log('Client init');\n        return fetch(uri, options);\n      },\n    cache: new InMemoryCache(),\n  });\n\n\n\nfunction  Login({setUser}){\n    const loginAnonymous = async () => {\n        const user = await App.logIn(Realm.Credentials.emailPassword(\"public@scanup.vicat.fr\",\"LeAheBaWtTRbM3KP\"));\n        setUser(user);\n        console.log(user);\n    }\n    return ( \n    <div>\n        <button onClick={loginAnonymous}>Login</button>\n        <button onClick={apolloClient}>Client</button>\n        <button onClick={dataQuery}>Identifiants</button>\n\n    </div> )\n   \n}\nfunction dataQuery() {\nconst  {loading, error , data} = apolloClient(gql `\nquery allDivisions {\n    ScanDivision {\n        _id,\n        certificat\n    }\n\n}`);\nconsole.log(data);\n\n}\n\nconst Dashboard = ()=> {\n    const  history = useNavigate()\n    const [quote, setQuote] = useState('')\n    const [tempQuote, setTempQuote] = useState('')\n\n    async function populateQuote(){\n       const req =  await fetch('http://localhost:1337/api/quote',{headers :{\n            'x-access-token': localStorage.getItem('token'),\n        },\n    })\n    const data = await req.json()\nif(data.status === 'ok'){\n    setQuote(data.quote)\n    }else{alert(data.error)}  \n  }\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    if (token) {\n        const user = jwt.decode(token)\n        if (!user) {\n            localStorage.removeItem('token')\n            history.replace('/login')\n        } else {\n            populateQuote()\n        }\n    }\n},)\nconst [user,setUser] = React.useState(App.curentUser);\n\nasync function updateQuote(event) {\n    event.preventDefault()\n\n    const req = await fetch('http://localhost:1337/api/quote', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-access-token': localStorage.getItem('token'),\n        },\n        body: JSON.stringify({\n            quote: tempQuote,\n        }),\n    })\n\n    const data = await req.json()\n    if (data.status === 'ok') {\n        setQuote(tempQuote)\n        setTempQuote('')\n    } else {\n        alert(data.error)\n    }\n}\n\nreturn (\n    <div>\n        <h1>Your quote: {quote || 'No quote found'}</h1>\n        <form onSubmit={updateQuote}>\n            <input\n                type=\"text\"\n                placeholder=\"Quote\"\n                value={tempQuote}\n                onChange={(e) => setTempQuote(e.target.value)}\n            />\n            <input type=\"submit\" value=\"Update quote\" />\n        </form>\n       <Login  setUser={setUser}/>\n\t\t</div>\n\t)\n}\n    \nexport default Dashboard\n\n\n"]},"metadata":{},"sourceType":"module"}