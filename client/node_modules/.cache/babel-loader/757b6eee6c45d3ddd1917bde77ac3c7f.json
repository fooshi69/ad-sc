{"ast":null,"code":"var _jsxFileName = \"/Users/kevinterrier/adm-sca/client/src/pages/Dashboard.js\";\nimport React, { useEffect } from 'react';\nimport jwt from 'jsonwebtoken';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from \"react\";\nimport * as Realm from 'realm-web';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APPID = 'scanup-bnmev';\nconst APP = new Realm.App({\n  id: APPID\n});\nconst tableau = [];\n\nclass Login extends React.Component {\n  constructor(props) {\n    var _s = $RefreshSig$();\n\n    super(props);\n\n    this.loginAnonymous = async () => {\n      const user = await APP.logIn(Realm.Credentials.emailPassword(\"public@scanup.vicat.fr\", \"LeAheBaWtTRbM3KP\"));\n      this.props.setUser(user);\n      console.log(user);\n      const client = APP.currentUser.mongoClient('mongodb-atlas');\n      console.log(client);\n      const db = client.db('scanup-db');\n      const collection = db.collection(\"ScanDivision\");\n      console.log(collection);\n      const col = (await collection.find()).slice(0, 10);\n      console.log(col);\n      const newList = [];\n\n      if (col) {\n        tableau.push(col);\n        var jsonDatas = JSON.stringify(tableau); //alert(jsonDatas) \n\n        newList.push(jsonDatas);\n        this.setState({\n          list: newList\n        });\n        alert(newList);\n      }\n    };\n\n    this.Dashboard = _s(() => {\n      _s();\n\n      const history = useNavigate();\n      const [quote, setQuote] = useState('');\n      const [tempQuote, setTempQuote] = useState('');\n      useEffect(() => {\n        const token = localStorage.getItem('token');\n\n        if (token) {\n          const user = jwt.decode(token);\n\n          if (!user) {\n            localStorage.removeItem('token');\n            history.replace('/login');\n          } else {}\n        }\n      });\n      const [user, setUser] = React.useState(APP.curentUser);\n\n      async function updateQuote(event) {\n        event.preventDefault();\n        const req = await fetch('http://localhost:1337/api/quote', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'x-access-token': localStorage.getItem('token')\n          },\n          body: JSON.stringify({\n            quote: tempQuote\n          })\n        });\n        const data = await req.json();\n\n        if (data.status === 'ok') {\n          setQuote(tempQuote);\n          setTempQuote('');\n        } else {\n          alert(data.error);\n        }\n      }\n\n      console.log(\"yolo\");\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tableau de bard scanup \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Login, {\n          setUser: setUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Login, {\n          setUser: setUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this);\n    }, \"8hZFW1TYKDrQhC94cwHeNkSLfRE=\", false, function () {\n      return [useNavigate];\n    });\n    this.state = {\n      list: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.loginAnonymous,\n        children: \"Utilisateurs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tableau de bord scanup \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Login, {\n        setUser: this.setUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: \"json.stringify(list)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/kevinterrier/adm-sca/client/src/pages/Dashboard.js"],"names":["React","useEffect","jwt","useNavigate","useState","Realm","APPID","APP","App","id","tableau","Login","Component","constructor","props","loginAnonymous","user","logIn","Credentials","emailPassword","setUser","console","log","client","currentUser","mongoClient","db","collection","col","find","slice","newList","push","jsonDatas","JSON","stringify","setState","list","alert","Dashboard","history","quote","setQuote","tempQuote","setTempQuote","token","localStorage","getItem","decode","removeItem","replace","curentUser","updateQuote","event","preventDefault","req","fetch","method","headers","body","data","json","status","error","state","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAOC,WAAP,QAAyB,kBAAzB;AACA,SAAUC,QAAV,QAA0B,OAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,WAAvB;;AAIA,MAAMC,KAAK,GAAG,cAAd;AACA,MAAMC,GAAG,GAAG,IAAIF,KAAK,CAACG,GAAV,CAAc;AAACC,EAAAA,EAAE,EAAEH;AAAL,CAAd,CAAZ;AAEA,MAAMI,OAAO,GAAG,EAAhB;;AAKA,MAAOC,KAAP,SAAqBX,KAAK,CAACY,SAA3B,CAAqC;AAEjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAAA;;AACf,UAAMA,KAAN;;AADe,SAMlBC,cANkB,GAMD,YAAY;AAE1B,YAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,KAAJ,CAAUZ,KAAK,CAACa,WAAN,CAAkBC,aAAlB,CAAgC,wBAAhC,EAAyD,kBAAzD,CAAV,CAAnB;AACA,WAAKL,KAAL,CAAWM,OAAX,CAAmBJ,IAAnB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,YAAMO,MAAM,GAAGhB,GAAG,CAACiB,WAAJ,CAAgBC,WAAhB,CAA4B,eAA5B,CAAf;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,YAAMG,EAAE,GAAGH,MAAM,CAACG,EAAP,CAAU,WAAV,CAAX;AACA,YAAMC,UAAU,GAAGD,EAAE,CAACC,UAAH,CAAc,cAAd,CAAnB;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYK,UAAZ;AACA,YAAMC,GAAG,GAAI,CAAC,MAAMD,UAAU,CAACE,IAAX,EAAP,EAA0BC,KAA1B,CAAgC,CAAhC,EAAkC,EAAlC,CAAb;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACA,YAAMG,OAAO,GAAE,EAAf;;AACA,UAAGH,GAAH,EAAO;AACHlB,QAAAA,OAAO,CAACsB,IAAR,CAAaJ,GAAb;AACC,YAAIK,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAezB,OAAf,CAAhB,CAFE,CAGH;;AACFqB,QAAAA,OAAO,CAACC,IAAR,CAAaC,SAAb;AAEC,aAAKG,QAAL,CAAc;AAACC,UAAAA,IAAI,EAACN;AAAN,SAAd;AACCO,QAAAA,KAAK,CAACP,OAAD,CAAL;AAEH;AACJ,KA7BkB;;AAAA,SA8CvBQ,SA9CuB,MA8CX,MAAK;AAAA;;AACb,YAAOC,OAAO,GAAGrC,WAAW,EAA5B;AACA,YAAM,CAACsC,KAAD,EAAQC,QAAR,IAAoBtC,QAAQ,CAAC,EAAD,CAAlC;AACA,YAAM,CAACuC,SAAD,EAAYC,YAAZ,IAA4BxC,QAAQ,CAAC,EAAD,CAA1C;AAEFH,MAAAA,SAAS,CAAC,MAAM;AACd,cAAM4C,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,YAAIF,KAAJ,EAAW;AACP,gBAAM7B,IAAI,GAAGd,GAAG,CAAC8C,MAAJ,CAAWH,KAAX,CAAb;;AACA,cAAI,CAAC7B,IAAL,EAAW;AACP8B,YAAAA,YAAY,CAACG,UAAb,CAAwB,OAAxB;AACAT,YAAAA,OAAO,CAACU,OAAR,CAAgB,QAAhB;AACH,WAHD,MAGO,CACN;AACJ;AACJ,OAVU,CAAT;AAYF,YAAM,CAAClC,IAAD,EAAMI,OAAN,IAAiBpB,KAAK,CAACI,QAAN,CAAeG,GAAG,CAAC4C,UAAnB,CAAvB;;AAEA,qBAAeC,WAAf,CAA2BC,KAA3B,EAAkC;AAC9BA,QAAAA,KAAK,CAACC,cAAN;AAEA,cAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAD,EAAoC;AACvDC,UAAAA,MAAM,EAAE,MAD+C;AAEvDC,UAAAA,OAAO,EAAE;AACL,4BAAgB,kBADX;AAEL,8BAAkBZ,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFb,WAF8C;AAMvDY,UAAAA,IAAI,EAAEzB,IAAI,CAACC,SAAL,CAAe;AACjBM,YAAAA,KAAK,EAAEE;AADU,WAAf;AANiD,SAApC,CAAvB;AAWA,cAAMiB,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;;AACA,YAAID,IAAI,CAACE,MAAL,KAAgB,IAApB,EAA0B;AACtBpB,UAAAA,QAAQ,CAACC,SAAD,CAAR;AACAC,UAAAA,YAAY,CAAC,EAAD,CAAZ;AACH,SAHD,MAGO;AACHN,UAAAA,KAAK,CAACsB,IAAI,CAACG,KAAN,CAAL;AACH;AACJ;;AAED1C,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEA,0BAEI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAQ,UAAA,OAAO,EAAEF;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,KAAD;AAAQ,UAAA,OAAO,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAKI;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAcC,KAxGsB;AAAA,cA+CFjB,WA/CE;AAAA;AAEf,SAAK6D,KAAL,GAAa;AAAC3B,MAAAA,IAAI,EAAC;AAAN,KAAb;AAEH;;AA0BD4B,EAAAA,MAAM,GAAG;AACL,wBACJ;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAE,KAAKlD,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAQ,QAAA,OAAO,EAAE,KAAKK;AAAtB;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADI;AAUH;;AA3CgC;;AA4GrC,eAAeT,KAAf","sourcesContent":["import React , {useEffect} from 'react'\nimport jwt from 'jsonwebtoken'\nimport{useNavigate} from 'react-router-dom'\nimport  { useState } from \"react\";\nimport * as Realm from 'realm-web'\n\n\n\nconst APPID = 'scanup-bnmev'\nconst APP = new Realm.App({id: APPID})\n\nconst tableau = [];\n\n\n\n\nclass  Login extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {list:[]}\n        \n    }\n\n     loginAnonymous = async () => {\n         \n        const user = await APP.logIn(Realm.Credentials.emailPassword(\"public@scanup.vicat.fr\",\"LeAheBaWtTRbM3KP\"));\n        this.props.setUser(user)      \n        console.log(user);\n        const client = APP.currentUser.mongoClient('mongodb-atlas');\n        console.log(client);\n        const db = client.db('scanup-db');\n        const collection = db.collection(\"ScanDivision\");\n        console.log(collection);\n        const col = ((await collection.find()).slice(0,10));\n        console.log(col);\n        const newList =[]\n        if(col){\n            tableau.push(col)\n             var jsonDatas = JSON.stringify(tableau)\n            //alert(jsonDatas) \n          newList.push(jsonDatas);\n\n           this.setState({list:newList})   \n            alert(newList)\n        \n        }\n    }\n    render() { \n        return(\n    <div>\n        <button onClick={this.loginAnonymous}>Utilisateurs</button>\n        <h1>Tableau de bord scanup </h1>\n        <Login  setUser={this.setUser}/>\n        <ul>\n            json.stringify(list)\n        </ul>\n\n    </div> )\n    }\n    \n\n\n\nDashboard = ()=> {\n    const  history = useNavigate()\n    const [quote, setQuote] = useState('')\n    const [tempQuote, setTempQuote] = useState('')\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    if (token) {\n        const user = jwt.decode(token)\n        if (!user) {\n            localStorage.removeItem('token')\n            history.replace('/login')\n        } else {\n        }\n    }\n},\n)\nconst [user,setUser] = React.useState(APP.curentUser);\n\nasync function updateQuote(event) {\n    event.preventDefault()\n\n    const req = await fetch('http://localhost:1337/api/quote', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-access-token': localStorage.getItem('token'),\n        },\n        body: JSON.stringify({\n            quote: tempQuote,\n        }),\n    })\n\n    const data = await req.json() \n    if (data.status === 'ok') {\n        setQuote(tempQuote)\n        setTempQuote('')\n    } else {\n        alert(data.error)\n    }\n}\n\nconsole.log(\"yolo\") \n\nreturn (\n\n    <div>\n        <h1>Tableau de bard scanup </h1>\n        <Login  setUser={setUser}/>\n        <Login  setUser={setUser}/>\n\n        <ul>\n        </ul>\n       \n\n\t\t</div>\n        \n\t)\n}\n}\nexport default Login\n\n\n"]},"metadata":{},"sourceType":"module"}