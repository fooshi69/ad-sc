{"ast":null,"code":"var _jsxFileName = \"/Users/kevinterrier/adm-sca/client/src/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport jwt from 'jsonwebtoken';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from \"react\";\nimport * as Realm from 'realm-web';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APPID = 'scanup-bnmev';\nconst APP = new Realm.App({\n  id: APPID\n});\n\nfunction Login({\n  setUser\n}) {\n  const loginAnonymous = async () => {\n    const user = await APP.logIn(Realm.Credentials.emailPassword(\"public@scanup.vicat.fr\", \"LeAheBaWtTRbM3KP\"));\n    setUser(user);\n    console.log(user);\n    const client = APP.currentUser.mongoClient('mongodb-atlas');\n    console.log(client);\n    const db = client.db('scanup-db');\n    const collection = db.collection(\"ScanDivision\");\n    console.log(collection);\n    const col = (await collection.find()).slice(0, 10);\n    console.log(col);\n\n    function AffichageUsers(col) {\n      return col.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 36\n      }, this));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loginAnonymous,\n      children: \"Utilisateurs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Login;\n\nconst Dashboard = () => {\n  _s();\n\n  const history = useNavigate();\n  const [quote, setQuote] = useState('');\n  const [tempQuote, setTempQuote] = useState('');\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = jwt.decode(token);\n\n      if (!user) {\n        localStorage.removeItem('token');\n        history.replace('/login');\n      } else {}\n    }\n  });\n  const [user, setUser] = React.useState(APP.curentUser);\n\n  async function updateQuote(event) {\n    event.preventDefault();\n    const req = await fetch('http://localhost:1337/api/quote', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        quote: tempQuote\n      })\n    });\n    const data = await req.json();\n\n    if (data.status === 'ok') {\n      setQuote(tempQuote);\n      setTempQuote('');\n    } else {\n      alert(data.error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tableau de bord scanup \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Login, {\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"8hZFW1TYKDrQhC94cwHeNkSLfRE=\", false, function () {\n  return [useNavigate];\n});\n\n_c2 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Login\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"sources":["/Users/kevinterrier/adm-sca/client/src/pages/Dashboard.js"],"names":["React","useEffect","jwt","useNavigate","useState","Realm","APPID","APP","App","id","Login","setUser","loginAnonymous","user","logIn","Credentials","emailPassword","console","log","client","currentUser","mongoClient","db","collection","col","find","slice","AffichageUsers","map","Dashboard","history","quote","setQuote","tempQuote","setTempQuote","token","localStorage","getItem","decode","removeItem","replace","curentUser","updateQuote","event","preventDefault","req","fetch","method","headers","body","JSON","stringify","data","json","status","alert","error"],"mappings":"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","sourcesContent":["import React , {useEffect} from 'react'\nimport jwt from 'jsonwebtoken'\nimport{useNavigate} from 'react-router-dom'\nimport  { useState } from \"react\";\nimport * as Realm from 'realm-web'\n\n\n\nconst APPID = 'scanup-bnmev'\nconst APP = new Realm.App({id: APPID})\n\n\n\n\n\n\nfunction  Login({setUser}){\n    const loginAnonymous = async () => {\n        const user = await APP.logIn(Realm.Credentials.emailPassword(\"public@scanup.vicat.fr\",\"LeAheBaWtTRbM3KP\"));\n        setUser(user);\n        console.log(user);\n        const client = APP.currentUser.mongoClient('mongodb-atlas');\n        console.log(client);\n        const db = client.db('scanup-db');\n        const collection = db.collection(\"ScanDivision\");\n        console.log(collection);\n        const col = ((await collection.find()).slice(0,10));\n        console.log(col);\n\n        function AffichageUsers(col){\n            return col.map(user => <li>user</li>)\n        }\n    }\n    return ( \n    <div>\n        <button onClick={loginAnonymous}>Utilisateurs</button>\n\n    </div> )\n   \n}\n\n\nconst Dashboard = ()=> {\n    const  history = useNavigate()\n    const [quote, setQuote] = useState('')\n    const [tempQuote, setTempQuote] = useState('')\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    if (token) {\n        const user = jwt.decode(token)\n        if (!user) {\n            localStorage.removeItem('token')\n            history.replace('/login')\n        } else {\n        }\n    }\n},\n)\nconst [user,setUser] = React.useState(APP.curentUser);\n\nasync function updateQuote(event) {\n    event.preventDefault()\n\n    const req = await fetch('http://localhost:1337/api/quote', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-access-token': localStorage.getItem('token'),\n        },\n        body: JSON.stringify({\n            quote: tempQuote,\n        }),\n    })\n\n    const data = await req.json()Â \n    if (data.status === 'ok') {\n        setQuote(tempQuote)\n        setTempQuote('')\n    } else {\n        alert(data.error)\n    }\n}\n\nreturn (\n    <div>\n        <h1>Tableau de bord scanup </h1>\n        <Login  setUser={setUser}/>\n\t\t</div>\n        \n\t)\n}\n    \nexport default Dashboard\n\n\n"]},"metadata":{},"sourceType":"module"}